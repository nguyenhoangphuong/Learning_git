package Shine

import com.excilys.ebi.gatling.core.Predef._

import Shine.Helper._

/** This object contains pre-defined info, configuration to run tests
  * as well as Shine-specific helpers
  */
object Predef {

	val apiKey = Map("api_key" -> "76801581")

	val apiUrl = Map("baseUrl" -> "https://testproduction.misfitwearables.com",
		"http" -> "http://",
		"https" -> "https://",
		"port" -> ":800",
		"elb" -> "misfit-shine-api-test-1663549078.us-east-1.elb.amazonaws.com",
		"small" -> "ec2-184-73-104-151.compute-1.amazonaws.com",
		"medium" -> "ec2-54-226-191-232.compute-1.amazonaws.com",
		"large" -> "ec2-23-22-9-220.compute-1.amazonaws.com",
		"xlarge" -> "ec2-54-242-121-128.compute-1.amazonaws.com",
		"local" -> "10.0.1.123",
		"signup" -> "/shine/v7/signup",
		"login" -> "/shine/v7/login",
		"logout" -> "/shine/v7/logout",
		"searchGraphItems" -> "/shine/v7/graph_items",
		"insertTimelineItems" -> "/shine/v7/timeline_items/batch_insert",
		"insertGraphItems" -> "/shine/v7/graph_items/batch_insert",
		"hello" -> "/shine/v7/hello.json",
		"synclog" -> "/shine/v7/sync_logs")

	val duration: Int = 120 // for each concurrency level

	val baseUrl: String = apiUrl("http") + apiUrl("xlarge") + apiUrl("port")

	val rampUp: Int = 10

	val concurrencyLevels: List[String] = List("10",
		"50",
		"100",
		"200",
		"500",
		"1000")

	def configs(): List[Map[String, String]] = {
		var i: Int = 0
		var size: Int = concurrencyLevels.size
		var runs: List[Map[String, String]] = List()

		for (i <- 0 until size) {
			runs = runs :+ Map("users" -> concurrencyLevels(i),
				"duration" -> duration.toString(),
				"baseUrl" -> baseUrl,
				"rampUp" -> rampUp.toString())
		}

		return runs
	}

	val user = Map("email" -> "t20130618_141603@t.t",
		"password" -> "qwerty1",
		"udid" -> "2d37b0812fb99cb76648cc99fc427eb7fc1613ad")

	val newUser = new Feeder[String] {
		override def hasNext() = true

		override def next(): Map[String, String] = {
			var newEmail: String = "test@email.number" + randomNumericString()
			
			Map("email" -> newEmail,
			"password" -> "qwerty1",
			"udid" -> "2d37b0812fb99cb76648cc99fc427eb7fc1613ad")
		}
	}

	def newUserList(count: Int = 2): List[Map[String, String]] = {
		var list: List[Map[String, String]] = List()
		var i: Int = 0

		for (i <- 1 to count) {
			list = list :+ newUser.next()
		}

		return list
	}

	val newSyncLog = new Feeder[String] {
		override def hasNext() = true

		override def next(): Map[String, String] = {
			var timestamp = System.currentTimeMillis();
			var serialNumberString = randomNumericString(6)

			var log = """{"log": { "startTime":"""
			log += timestamp
			log += """ ,      "endTime": """
			log += timestamp
			
			log += """,      "serialNumberString": """
			log += "\"" 
			log += serialNumberString
			log += "\"" 
			log += """,      "log": "No log",      "data": {         "fileData": [            {"rawData}         ]     } }}"""

			System.out.println(log)
			Map("log" -> log)
		}
	}

	val newTimelineItem = new Feeder[String] {
		override def hasNext() = true

		override def next(): Map[String, String] = {
			var newLocalId: String = randomNumericString(5)
			var item: String = ""
			var timestamp = System.currentTimeMillis();

			item += "{\"updatedAt\":"
			item += timestamp
			item +=",\"timestamp\":"
			item += timestamp
			item += ",\"itemType\":1,"
			item += "\"data\":{\"temperatureF\":100,\"locationName\":\"Stockholm\",\"code\":100},"
			item += "\"localId\":\"" + newLocalId + "\"}"

			Map("item" -> item)
		}
	}

	def newTimelineItems(count: Int = 1): String = {
		var list: String = "[" + newTimelineItem.next()("item")
		var i: Int = 0

		for (i <- 1 until count) {
			list += "," + newTimelineItem.next()("item")
		}

		list += "]"

		//System.out.println(list)

		return list
	}

	val newGraphItem = new Feeder[String] {
		override def hasNext() = true

		override def next(): Map[String, String] = {
			var item: String = ""
			var timestamp = System.currentTimeMillis();

			item += "{\"updatedAt\":"
			item += timestamp
			item +=",\"timestamp\":"
			item += timestamp
			item += ",\"averageValue\":1,\"totalValue\":0}"
			Map("item" -> item)
		}
	}

	def newGraphItems(count: Int = 1): String = {
		var list: String = "[" + newGraphItem.next()("item")
		var i: Int = 0

		for (i <- 1 until count) {
			list += "," + newGraphItem.next()("item")
		}

		list += "]"

		System.out.println(list)

		return list
	}
	
}
